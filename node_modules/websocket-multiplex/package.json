{
  "name": "websocket-multiplex",
  "author": {
    "name": "Marek Majkowski"
  },
  "version": "0.1.0",
  "description": "WebSocket-multiplex is a thin library on top of SockJS that allows you to do multiplexing of many virtual WebSockets connection over a single physical one.",
  "keywords": [
    "websockets",
    "websocket",
    "sockjs",
    "multiplex",
    "multiplexing"
  ],
  "homepage": "https://github.com/sockjs/websocket-multiplex",
  "repository": {
    "type": "git",
    "url": "https://github.com/sockjs/websocket-multiplex.git"
  },
  "dependencies": {
    "sockjs": "*"
  },
  "main": "multiplex_server",
  "readme": "\nWebSocket-multiplex\n===================\n\nWebSocket-multiplex is a small library on top of SockJS that allows\nyou to do multiplexing over a single SockJS connection.\n\nThe rationale for that is explained in details in the following blog\npost:\n\n  * https://www.rabbitmq.com/blog/2012/02/23/how-to-compose-apps-using-websockets/\n\n\nUsage from the browser\n----------------------\n\nOn the client side (browser) load library like that:\n\n    <script src=\"http://cdn.sockjs.org/websocket-multiplex-0.1.js\">\n      </script>\n\nAlternatively, if you're using SSL:\n\n    <script src=\"https://d1fxtkz8shb9d2.cloudfront.net/websocket-multiplex-0.1.js\">\n      </script>\n\nUsage example:\n\n```javascript\n    var sockjs_url = '/multiplex';\n    var sockjs = new SockJS(sockjs_url);\n\n    var multiplexer = new WebSocketMultiplex(sockjs);\n    var ann  = multiplexer.channel('ann');\n    var bob  = multiplexer.channel('bob');\n    var carl = multiplexer.channel('carl');\n```\n\nUsage from the node.js server\n-----------------------------\n\nOn the node.js server side, you can use npm to get the code:\n\n    npm install websocket-multiplex\n\nAnd a simplistic example:\n\n```javascript\n    var multiplex_server = require('websocket-multiplex');\n\n    // 1. Setup SockJS server\n    var service = sockjs.createServer();\n\n    // 2. Setup multiplexing\n    var multiplexer = new multiplex_server.MultiplexServer(service);\n\n    var ann = multiplexer.registerChannel('ann');\n    ann.on('connection', function(conn) {\n        conn.write('Ann says hi!');\n        conn.on('data', function(data) {\n            conn.write('Ann nods: ' + data);\n        });\n    });\n\n    // 3. Setup http server\n    var server = http.createServer();\n    sockjs_echo.installHandlers(server, {prefix:'/multiplex'});\n    var app = express.createServer();\n```\n\nFor a full-featured example see the\n[/examples/sockjs](https://github.com/sockjs/websocket-multiplex/tree/master/examples/sockjs)\ndirectory.\n\n\nProtocol\n--------\n\nThe underlying protocol is quite simple. Each message consists of\nfour comma separated parts: _type_, _topic_, _id and _payload_. There are\nthree valid message types:\n\n * `sub` - expresses a will to subscribe to a given _topic_.\n * `msg` - a message with _payload_ is being sent on a _topic_.\n * `uns` - a will to unsubscribe from a _topic_.\n\nThe _topic identifies a channel registered on the server side.\n\nThe _id_ is unique id generated on the client side when it \nrequest to subscribe to a topic. The _id_ identifies a connection instance. \nThis makes it possible for a single client to open multiple connections to \na single server-side service.\n\nInvalid messages like wrong unsubscriptions or publishes to a _topic_\nto which a client was not subscribed to are simply ignored.\n\nThis protocol assumes that both parties are genrally willing to\ncopperate and no party can express any kind of errors. All invalid\nmessages should be ignored.\n\nIt's important to notice that the namespace is shared between both\nparties and it is not a good idea to use the same topic names on the\nclient and on the server side. Both parties may express a will to\nunsubscribe itself or other party from a topic.\n",
  "_id": "websocket-multiplex@0.1.0",
  "dist": {
    "shasum": "4cf56ba5a6612340d2b5f935d87a068c9e3f108b"
  },
  "_from": "websocket-multiplex@https://github.com/kdvolder/websocket-multiplex/archive/master.tar.gz"
}
