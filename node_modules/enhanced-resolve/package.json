{
  "name": "enhanced-resolve",
  "version": "0.4.5",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "description": "Offers a async require.resolve function. It's highly configurable.",
  "dependencies": {},
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "engines": {
    "node": ">=0.6"
  },
  "main": "lib/cachedFsResolve.js",
  "homepage": "http://github.com/webpack/enhanced-resolve",
  "scripts": {
    "test": "node node_modules/mocha/bin/_mocha --reporter spec"
  },
  "license": "MIT",
  "readme": "# enhanced-resolve\r\n\r\nOffers a async require.resolve function. It's highly configurable.\r\n\r\n\r\n## Features\r\n\r\n* sync and async versions\r\n* loaders and query strings\r\n* normal resolve\r\n* context resolve (resolve a directory)\r\n* loaders resolve\r\n* code completion\r\n\r\n\r\n## Request Format\r\n\r\nrelative: `./file`, `.././../folder/./file`\r\n\r\nabsolute: `/home/file`, `C:\\folder\\file`\r\n\r\nmodule: `module`, `module/with/sub/file`\r\n\r\nquery: `resourceFile?query` (with resourceFile one of above, and query be any string)\r\n\r\nloaders: `loader!resource`, `loader1!loader2!resource` (with loader and resource each one of above)\r\n\r\nExample: `raw!./customLoader?evil,strict!C:\\fail\\loader?fail=big!../file.js?charset=utf-8`\r\n\r\n\r\n## Methods\r\n\r\n``` javascript\r\nvar resolve = require(\"enhanced-resolve\");\r\n\r\n// Resolve a normal request\r\nresolve(context: String, identifier: String, options?: Object, callback: (err: Error, result: String))\r\nresolve.sync(context: String, identifier: String, options?: Object) => String\r\n\r\n// Resolve a context request, which means the result should be a folder\r\nresolve.context(context: String, identifier: String, options?: Object, callback: (err: Error, result: String))\r\nresolve.context.sync(context: String, identifier: String, options?: Object) => String\r\n\r\n// Only resolve loaders, a array of resolved loaders is the result\r\nresolve.loaders(context: String, identifier: String, options?: Object, callback: (err: Error, result: String[]))\r\nresolve.loaders.sync(context: String, identifier: String, options?: Object) => String[]\r\n\r\n// Autocomplete a incomplete require expression.\r\n// identifier must contain exactly one \"*\", which indicates the insert position\r\nresolve.complete(context: String, identifier: String, options?: Object, callback: (err: Error, result: Completion[]))\r\nresolve.complete.sync(context: String, identifier: String, options?: Object) => Completion[]\r\n\r\n// parse a request\r\nresolve.parse(identifier: String) => {loaders: Part[], resource: Part}\r\n\r\n// parse only a part\r\nresolve.parse.part(identifierPart: String) => Part\r\n\r\n// stringify a parsed request\r\nresolve.stringify(parsed: {loaders: Part[], resource: Part}) => String\r\n\r\n// stringify only a part\r\nresolve.stringify.part(part: Part) => String\r\n\r\n// checks if a request part is a module\r\nresolve.parse.isModule(identifierPart: String) => Boolean\r\n\r\n// the type used for parse and stringify\r\ntype Part { path: String, query: String, module: Boolean }\r\n\r\ntype Completion { // examples for \"loader!module/dir/fi*?query\"\r\n\tinsert: String,   // i. e. \"le.js\"\r\n\tseqment: String,  // i. e. \"file.js\"\r\n\tpart: String,     // i. e. \"module/dir/file.js?query\"\r\n\tresult: String    // i. e. \"loader!module/dir/file.js?query\"\r\n}\r\n```\r\n\r\n\r\n## Options\r\n\r\n``` javascript\r\n{\r\n  paths: [\"/my/absolute/dirname\"],\r\n  // default: []\r\n  // search paths for modules\r\n\r\n  modulesDirectories: [\"xyz_modules\", \"node_modules\"],\r\n  // default: (defaults are NOT included if you define your own)\r\n  //  [\"node_modules\"];\r\n  // directories to be searched for modules\r\n\r\n  alias: {\r\n   \"old-module\": \"new-module\",\r\n   \"another-module\": \"new-module/more/stuff\"\r\n  },\r\n  // replace a module\r\n\r\n  extensions: [\"\", \".www.js\", \".js\"],\r\n  // defaults: (defaults are NOT included if you define your own)\r\n  //   [\"\", \".js\"]\r\n  // postfixes for files to try\r\n\r\n  packageMains: [\"abc\", \"main\"]\r\n  // defaults: [\"main\"]\r\n  // lookup fields in package.json\r\n\r\n  loaderExtensions: [\".loader.js\", \".www-loader.js\", \"\", \".js\"],\r\n  // defaults: (defaults are NOT included if you define your own)\r\n  //   [\".node-loader.js\", \".loader.js\", \"\", \".js\"]\r\n  // postfixes for loaders to try\r\n\r\n  loaderPostfixes: [\"-loader\", \"-xyz\", \"\"],\r\n  // defaults: (defaults are NOT included if you define your own)\r\n  //   [\"-node-loader\", \"-loader\", \"\"]\r\n  // postfixes for loader modules to try\r\n\r\n  loaderPackageMains: [\"myloader\", \"main\"]\r\n  // defaults: [\"loader\", \"main\"]\r\n  // lookup fields for loaders in package.json\r\n\r\n  loaders: [{\r\n\t// test, include and exclude can be undefined, RegExp, string or array of these\r\n    test: /\\.generator\\.js/,\r\n\tinclude: \"\\\\.js\",\r\n    exclude: [\r\n\t\t/\\.no\\.generator\\.js/,\r\n\t\t\"\\\\.nono\\\\.generator\\\\.js\"\r\n\t}\r\n    loader: \"val\"\r\n  }],\r\n  // default: []\r\n  // automatically use loaders if resolved filename match RegExp\r\n  // and no loader is specified.\r\n\r\n  postprocess: {\r\n   normal: [function(filename, callback) {\r\n    // webpack will not find files including \".exclude.\"\r\n    if(/\\.exclude\\.[^\\\\\\/]*$/.test(filename))\r\n\t return callback(new Error(\"File is excluded\"));\r\n\tcallback(null, filename);\r\n   }],\r\n   // defaults: []\r\n   // postprocess resolved filenames by all specified async functions\r\n   // a postprocessor must call the callback\r\n   // You can pass a filename instead of a function\r\n   // The filename is required and the exports are expected to be a function.\r\n\r\n   context: [],\r\n   // same as postprocess.normal but for contextes\r\n  }\r\n\r\n  disableLoaders: false,\r\n  // disallow loaders\r\n\r\n  disableResourceQuery: false,\r\n  // disallow query at resource\r\n\r\n  disableResourcePureQuery: false,\r\n  // disallow only query without resource\r\n\r\n  disableLoaderQuery: false,\r\n  // disallow queries at loaders\r\n}\r\n```\r\n\r\n\r\n## Tests\r\n\r\n``` javascript\r\nnpm test\r\n```\r\n\r\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2012 Tobias Koppers\r\n\r\nMIT (http://www.opensource.org/licenses/mit-license.php)",
  "_id": "enhanced-resolve@0.4.5",
  "dist": {
    "shasum": "04055d8ac51b9f62781f26eb16b53add7d1be4fa"
  },
  "_from": "enhanced-resolve@0.4.5"
}
